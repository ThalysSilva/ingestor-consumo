services:
  ingestor-1:
    build:
      context: .
      dockerfile: build/Dockerfile
    container_name: ingestor-1
    ports: [] 
    env_file:
      - .env
    depends_on:
      - redis-primary
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    networks:
      - pulse-ingestor-network
  ingestor-2:
    build:
      context: .
      dockerfile: build/Dockerfile
    container_name: ingestor-2
    ports: []
    env_file:
      - .env
    depends_on:
      - redis-primary
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    networks:
      - pulse-ingestor-network


  sender:
    build:
      context: .
      dockerfile: build/Dockerfile.sender
    container_name: sender
    env_file:
      - .env
    depends_on:
      - redis-primary
      - redis-sentinel-1
      - redis-sentinel-2
      - redis-sentinel-3
    networks:
      - pulse-ingestor-network
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./build/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - ingestor-1
      - ingestor-2
    networks:
      - pulse-ingestor-network
  redis-primary:
    image: redis:latest
    container_name: redis-primary
    ports:
      - "6379:6379"
    command: redis-server --maxclients 10000 --tcp-backlog 511 --timeout 0 --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - pulse-ingestor-network

  redis-replica:
    image: redis:latest
    container_name: redis-replica
    ports:
      - "6380:6379"
    command: redis-server --maxclients 10000 --tcp-backlog 511 --timeout 0 --appendonly yes --appendfsync everysec --replicaof redis-primary 6379
    depends_on:
      redis-primary:
        condition: service_healthy
    networks:
      - pulse-ingestor-network

  redis-sentinel-1:
    image: redis:latest
    container_name: redis-sentinel-1
    entrypoint: ["/entrypoint.sh"]
    volumes:
      - ./build/entrypoint.sh:/entrypoint.sh
      - ./build/sentinel-data-1:/etc/redis
    ports:
      - "26379:26379"
    depends_on:
      redis-primary:
        condition: service_healthy
      redis-replica:
        condition: service_started
    networks:
      - pulse-ingestor-network

  redis-sentinel-2:
    image: redis:latest
    container_name: redis-sentinel-2
    entrypoint: ["/entrypoint.sh"]
    volumes:
      - ./build/entrypoint.sh:/entrypoint.sh
      - ./build/sentinel-data-2:/etc/redis
    ports:
      - "26380:26379"
    depends_on:
      redis-primary:
        condition: service_healthy
      redis-replica:
        condition: service_started
    networks:
      - pulse-ingestor-network

  redis-sentinel-3:
    image: redis:latest
    container_name: redis-sentinel-3
    entrypoint: ["/entrypoint.sh"]
    volumes:
      - ./build/entrypoint.sh:/entrypoint.sh
      - ./build/sentinel-data-3:/etc/redis
    ports:
      - "26381:26379"
    depends_on:
      redis-primary:
        condition: service_healthy
      redis-replica:
        condition: service_started
    networks:
      - pulse-ingestor-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./build/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - pulse-ingestor-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./build/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - pulse-ingestor-network

volumes:
  grafana-storage:
    driver: local
  sentinel-data-1:
    driver: local
  sentinel-data-2:
    driver: local
  sentinel-data-3:
    driver: local

networks:
  pulse-ingestor-network:
    name: pulse-ingestor-network
    driver: bridge
